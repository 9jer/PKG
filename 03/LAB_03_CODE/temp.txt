import javafx.application.Application;
import javafx.embed.swing.SwingFXUtils;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.geometry.Insets;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.util.Collections;

public class Main extends Application {
    private ImageView imageView = new ImageView();
    private Mat originalImage;

    public static void main(String[] args) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Image Processing App");

        Button openButton = new Button("Open Image");
        openButton.setOnAction(e -> openImage());

        Button applyFilterButton = new Button("Apply Median Filter");
        applyFilterButton.setOnAction(e -> applyMedianFilter());

        Button applyOtsuButton = new Button("Apply Otsu Threshold");
        applyOtsuButton.setOnAction(e -> applyOtsuThreshold());

        Button applyGlobalThresholdButton = new Button("Apply Global Threshold");
        applyGlobalThresholdButton.setOnAction(e -> applyGlobalThreshold());

        Button applyAdaptiveThresholdButton = new Button("Apply Adaptive Threshold");
        applyAdaptiveThresholdButton.setOnAction(e -> applyAdaptiveThreshold());

        VBox buttonsBox = new VBox(10, openButton, applyFilterButton, applyOtsuButton, applyGlobalThresholdButton, applyAdaptiveThresholdButton);
        buttonsBox.setAlignment(Pos.TOP_LEFT);
        buttonsBox.setPadding(new Insets(10));

        BorderPane borderPane = new BorderPane();
        borderPane.setLeft(buttonsBox);

        VBox imageContainer = new VBox();
        imageContainer.getChildren().add(imageView);
        imageContainer.setBorder(new Border(new BorderStroke(Color.BLACK,
                BorderStrokeStyle.SOLID, CornerRadii.EMPTY, BorderWidths.DEFAULT)));

        borderPane.setCenter(imageContainer);

        Scene scene = new Scene(borderPane, 800, 600);

        // Bind the size of the image container to the scene size
        imageContainer.prefWidthProperty().bind(scene.widthProperty().subtract(buttonsBox.getWidth()));
        imageContainer.prefHeightProperty().bind(scene.heightProperty());

        // Bind the size of the image to the size of the image container
        imageView.fitWidthProperty().bind(imageContainer.widthProperty());
        imageView.fitHeightProperty().bind(imageContainer.heightProperty());

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void openImage() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Image Files", "*.png", "*.jpg", "*.jpeg"));
        File selectedFile = fileChooser.showOpenDialog(null);

        if (selectedFile != null) {
            originalImage = Imgcodecs.imread(selectedFile.getAbsolutePath());
            showImage(originalImage);
        }
    }

    private void showImage(Mat image) {
        Image fxImage = mat2Image(image);
        imageView.setImage(fxImage);


    }

    private void applyMedianFilter() {
        if (originalImage != null) {
            Mat filteredImage = new Mat();
            Imgproc.medianBlur(originalImage, filteredImage, 5); // 5x5 медианный фильтр

            showImage(filteredImage);
        }
    }

    private void applyOtsuThreshold() {
        if (originalImage != null) {
            Mat thresholdedImage = new Mat();
            Imgproc.cvtColor(originalImage, thresholdedImage, Imgproc.COLOR_BGR2GRAY);
            Imgproc.threshold(thresholdedImage, thresholdedImage, getOtsuThreshold(thresholdedImage), 255, Imgproc.THRESH_BINARY);

            showImage(thresholdedImage);
        }
    }

    private void applyGlobalThreshold() {
        if (originalImage != null) {
            Mat thresholdedImage = new Mat();
            Imgproc.cvtColor(originalImage, thresholdedImage, Imgproc.COLOR_BGR2GRAY);

            double epsilon = 1.0; // Set your desired epsilon value
            int currentThreshold = 128; // Initial threshold value
            int previousThreshold = -1;

            while (Math.abs(currentThreshold - previousThreshold) > epsilon) {
                Mat foreground = new Mat();
                Mat background = new Mat();

                Core.compare(thresholdedImage, new Scalar(currentThreshold), foreground, Core.CMP_GT);
                Core.compare(thresholdedImage, new Scalar(currentThreshold), background, Core.CMP_LE);

                Scalar foregroundMean = Core.mean(thresholdedImage, foreground);
                Scalar backgroundMean = Core.mean(thresholdedImage, background);

                previousThreshold = currentThreshold;
                currentThreshold = (int) ((foregroundMean.val[0] + backgroundMean.val[0]) / 2.0);

                Imgproc.threshold(thresholdedImage, thresholdedImage, currentThreshold, 255, Imgproc.THRESH_BINARY);
            }

            showImage(thresholdedImage);
        }
    }

    private void applyAdaptiveThreshold() {
        if (originalImage != null) {
            Mat grayImage = new Mat();
            Imgproc.cvtColor(originalImage, grayImage, Imgproc.COLOR_BGR2GRAY);

            Mat thresholdedImage = new Mat();
            Imgproc.adaptiveThreshold(
                    grayImage, thresholdedImage,
                    255, Imgproc.ADAPTIVE_THRESH_MEAN_C,
                    Imgproc.THRESH_BINARY, 3, 0
            );

            showImage(thresholdedImage);
        }
    }

    private double getOtsuThreshold(Mat image) {
        Mat hist = new Mat();
        Imgproc.calcHist(Collections.singletonList(image), new MatOfInt(0), new Mat(), hist, new MatOfInt(256), new MatOfFloat(0, 256));

        int totalPixels = image.rows() * image.cols();
        double sum = 0;
        for (int t = 0; t < 256; t++) {
            sum += t * hist.get(t, 0)[0];
        }

        double sumB = 0;
        int wB = 0;
        int wF = 0;

        double varMax = 0;
        double threshold = 0;

        for (int t = 0; t < 256; t++) {
            wB += hist.get(t, 0)[0];
            if (wB == 0)
                continue;

            wF = totalPixels - wB;
            if (wF == 0)
                break;

            sumB += t * hist.get(t, 0)[0];

            double mB = sumB / wB;
            double mF = (sum - sumB) / wF;

            double varBetween = wB * wF * Math.pow(mB - mF, 2);

            if (varBetween > varMax) {
                varMax = varBetween;
                threshold = t;
            }
        }

        return threshold;
    }

    private Image mat2Image(Mat mat) {
        MatOfByte byteMat = new MatOfByte();
        Imgcodecs.imencode(".png", mat, byteMat);
        byte[] byteArray = byteMat.toArray();

        try {
            BufferedImage bufImage = ImageIO.read(new ByteArrayInputStream(byteArray));
            return SwingFXUtils.toFXImage(bufImage, null);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }
}
